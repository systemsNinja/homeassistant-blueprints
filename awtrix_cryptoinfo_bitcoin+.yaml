blueprint:
  name: "AWTRIX Cryptoinfo Bitcoin+"
  description: |
    This blueprint will show the price of bitcoin, or any other cryptoinfo sensor you have created. If you want more than 1 crypto price, just change the name of the app, sensors used, icon and save as a seperate integration .

    ## ⚠️ REQUIREMENTS ⚠️

    1.  **Cryptoinfo:** You must have the official Cryptoinfo integration installed. 
        - [Cryptoinfo](https://github.com/heyajohnny/cryptoinfo)
    2.  You need to upload any icons used here to your AWTRIX device.

  domain: automation
  input:
    awtrix:
      name: AWTRIX Device
      description: Select the Awtrix Device
      selector:
        device:
          filter:
            - integration: mqtt
              manufacturer: Blueforcer
          multiple: true
    app_name:
      name: Custom App Name
      description: This is the app name listed in the MQTT topic. It should be unique.
      selector:
        text: {}
      default: "bitcoin"
    bitcoin_sensor:
      name: Crypto sensor
      description: Crypto sensor
      selector:
        entity:
          integration: cryptoinfo
          multiple: false
    bitcoin_icon:
      name: Icon
      description: Enter the Icon Name or ID of the icon that you like to show.
      selector:
        text:
      default: "12460"
#    push_icon:
#      name: Icon Behavior
#      description: Select how the icon should be displayed.
#      selector:
#        select:
#          options:
#            - label: "Icon doesn't move"
#              value: "0"
#            - label: "Icon moves with text"
#              value: "1"
#            - label: "Icon moves & reappears"
#              value: "2"
#            - label: "No Icon"
#              value: "3"
#          mode: dropdown
#      default: "0"
    duration:
      name: Duration (in seconds)
      description: Sets how long the app should be displayed.
      selector:
        number:
          min: 1
          max: 60
          step: 1
          mode: slider
      default: "10"
    text_color:
      name: Text Color
      description: Select the Text color
      selector:
        color_rgb:
      default: [255, 255, 255]
    rainbox_text:
      name: Rainbow Text
      description: Overrides the text color and makes the text a rainbow gradient.
      selector:
        boolean:
      default: false
    effect:
      name: Background Effect
      description: The display effect to use for the background.
      selector:
        select:
          options:
            - "None"
            - "Fade"
            - "MovingLine"
            - "BrickBreaker"
            - "PingPong"
            - "Radar"
            - "Checkerboard"
            - "Fireworks"
            - "PlasmaCloud"
            - "Ripple"
            - "Snake"
            - "Pacifica"
            - "TheaterChase"
            - "Plasma"
            - "Matrix"
            - "SwirlIn"
            - "SwirlOut"
            - "LookingEyes"
            - "TwinklingStars"
            - "ColorWaves"
      default: "TwinklingStars"
    update_interval:
      name: Update Interval
      description: 'Updates will be sent as often as the IQVIA values change and whatever you set it here.'
      selector:
        select:
          mode: dropdown
          options:
          - label: 1 minute
            value: /1
          - label: 2 minutes
            value: /2
          - label: 3 minutes
            value: /3
          - label: 4 minutes
            value: /4
          - label: 5 minutes
            value: /5
          - label: 10 minutes
            value: /10
          - label: 30 minutes
            value: /30
          multiple: false
          custom_value: false
          sort: false
      default: /5
    lifetime:
      name: Lifetime of the app after no update from automation
      description: >-
        Defines how long the app should stay alive after there has been update from the automation.
      selector:
        select:
          mode: dropdown
          options:
            - label: "5 minutes"
              value: "300"
            - label: "10 minutes"
              value: "600"
            - label: "15 minutes"
              value: "900"
            - label: "30 minutes"
              value: "1800"
            - label: "45 minutes"
              value: "2700"
            - label: "1 hour"
              value: "3600"
      default: "300"
    lifetimeMode:
      name: Lifetime Mode
      description: What happens after the app's lifetime expires.
      selector:
        select:
          options:
            - label: "Remove app from rotation"
              value: "0"
            - label: "Show a 'stale' indicator"
              value: "1"
      default: "0"

variables:
  device_ids: !input awtrix
  app: !input app_name
  icon: !input bitcoin_icon
  text_color: !input text_color
  rainbox_text: !input rainbox_text
  sensor_bitcoin: !input bitcoin_sensor
#  push_icon: !input push_icon
  effect: !input effect
  duration: !input duration
  update_interval: !input update_interval
  lifetime: !input lifetime
  lifetimeMode: !input lifetimeMode
  awtrix_devices: >-
    {%- set ns = namespace(awtrix = []) -%}
    {%- for device_id in device_ids -%}
      {%- set device_name = iif(device_attr(device_id, 'name_by_user') != none, device_attr(device_id, 'name_by_user'), device_attr(device_id, 'name')) -%}
      {%- set entity = expand(device_entities(device_id)) | select('search', 'device_topic') | map(attribute='entity_id') | first -%}
      {%- set topic = states(entity) -%}
      {% set ns.awtrix = ns.awtrix + [{"device": device_name, "entity": entity, "topic": topic}] -%}
    {%- endfor -%}
    {{ ns.awtrix }}
trigger:
  - platform: state
    entity_id:
      - !input bitcoin_sensor
  - platform: time_pattern
    minutes: !input update_interval
action:
  - repeat:
      for_each: "{{ awtrix_devices }}"
      sequence:
        - choose:
            - conditions:
                - condition: template
                  value_template: >
                      {{ states(repeat.item.entity) not in ['unavailable', 'unknown'] }}
                - condition: template
                  value_template: >
                      {{ states(sensor_bitcoin) not in ['unavailable', 'unknown'] }}
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item.topic ~ '/custom/' ~ app }}"
                    payload: |
                      {   
                        "text": "{{ states(sensor_bitcoin) | round(0) }}",
                        "icon": "{{ icon }}",
                        "effect": "{{ effect }}",
                        "duration": {{ duration }},
                        "lifetime": {{ lifetime }},
                        "lifetimeMode": {{ lifetimeMode }},
                        "color": {{ text_color | tojson }},
                        "rainbow": {{ rainbox_text | lower }}
                      }
#                        "pushIcon": {{ push_icon }},
mode: restart

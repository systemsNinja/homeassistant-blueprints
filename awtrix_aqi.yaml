blueprint:
  name: AWTRIX AQI (AirNow Text + AccuWeather Forecast)
  description: >
    Displays a human-friendly AQI status from AirNow.gov and a 5-day forecast color-coded by AccuWeather's text descriptions.
    The status text will change color depending on the air quality level.
  domain: automation
  input:
    awtrix:
      name: AWTRIX Device(s)
      description: Select the Awtrix light(s) you want to send the notification to.
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          model: AWTRIX 3
          multiple: true
    app_name:
      name: Custom App Name
      description: This is the app name listed in the MQTT topic. It should be unique.
      selector:
        text: {}
      default: aqi
    airnow_sensor:
      name: Airnow.gov AQI Sensor (Numerical)
      description: The Airnow.gov sensor that provides the current numerical AQI value.
      selector:
        entity:
          integration: airnow
    accuweather_aqi_day0:
      name: Accuweather Forecast Today (Text)
      description: >
        Accuweather sensor with a text state (e.g., "good", "moderate") for Today. 
        EX: sensor.accuweather_guttenberg_air_quality_today
      selector:
        entity:
          integration: accuweather
          device_class: enum
    accuweather_aqi_day1:
      name: Accuweather Forecast Tomorrow (Text)
      description: >
        Accuweather sensor with a text state for Tomorrow.
        EX: sensor.accuweather_guttenberg_air_quality_day_1
      selector:
        entity:
          integration: accuweather
          device_class: enum
    accuweather_aqi_day2:
      name: Accuweather Forecast Day 2 (Text)
      description: >
        Accuweather sensor with a text state for Day 2.
        EX: sensor.accuweather_guttenberg_air_quality_day_2
      selector:
        entity:
          integration: accuweather
          device_class: enum
    accuweather_aqi_day3:
      name: Accuweather Forecast Day 3 (Text)
      description: >
        Accuweather sensor with a text state for Day 3.
        EX: sensor.accuweather_guttenberg_air_quality_day_3
      selector:
        entity:
          integration: accuweather
          device_class: enum
    accuweather_aqi_day4:
      name: Accuweather Forecast Day 4 (Text)
      description: >
        Accuweather sensor with a text state for Day 4.
        EX: sensor.accuweather_guttenberg_air_quality_day_4
      selector:
        entity:
          integration: accuweather
          device_class: enum
    # --- Configuration ---
    duration:
      name: Duration (in seconds)
      description: Sets how long the app or notification should be displayed.
      default: "10"
    effect:
      name: Effect
      description: The display effect to use for the background.
      selector:
        select:
          options:
            - "None"
            - "Fade"
            - "MovingLine"
            - "BrickBreaker"
            - "PingPong"
            - "Radar"
            - "Checkerboard"
            - "Fireworks"
            - "PlasmaCloud"
            - "Ripple"
            - "Snake"
            - "Pacifica"
            - "TheaterChase"
            - "Plasma"
            - "Matrix"
            - "SwirlIn"
            - "SwirlOut"
            - "LookingEyes"
            - "TwinklingStars"
            - "ColorWaves"
      default: "TwinklingStars"
    update_interval:
      name: Update Interval (in minutes)
      description: How often to send the stats to the device.
      selector:
        number:
          min: 1
          max: 59
          step: 1
          mode: slider
      default: 30
    lifetime:
      name: Lifetime of the app after no update from automation
      description: >-
        Defines how long the app should stay alive after there has been update from the automation.
      selector:
        select:
          mode: dropdown
          options:
            - label: "45 minutes"
              value: "2700"
            - label: "1 hour"
              value: "3600"
            - label: "1.5 hours"
              value: "5400"
            - label: "2 hours"
              value: "7200"
      default: "2700"
    lifetimeMode:
      name: Lifetime Mode
      description: What happens after the app's lifetime expires.
      selector:
        select:
          options:
            - label: "Remove app from rotation"
              value: "0"
            - label: "Show a 'stale' indicator"
              value: "1"
      default: "0"

mode: restart

variables:
  # Get the entity IDs from the blueprint inputs
  accuweather_sensor_day0: !input accuweather_aqi_day0
  accuweather_sensor_day1: !input accuweather_aqi_day1
  accuweather_sensor_day2: !input accuweather_aqi_day2
  accuweather_sensor_day3: !input accuweather_aqi_day3
  accuweather_sensor_day4: !input accuweather_aqi_day4
  airnow_entity: !input airnow_sensor

  # Get the states of the sensors. Accuweather are text, AirNow is a number.
  accuweather_today: "{{ states(accuweather_sensor_day0) | lower }}"
  accuweather_day1: "{{ states(accuweather_sensor_day1) | lower }}"
  accuweather_day2: "{{ states(accuweather_sensor_day2) | lower }}"
  accuweather_day3: "{{ states(accuweather_sensor_day3) | lower }}"
  accuweather_day4: "{{ states(accuweather_sensor_day4) | lower }}"
  airnow_current: "{{ states(airnow_entity) | int(0) }}"
  #device configuration and look and feel
  update_interval: !input update_interval
  lifetime: !input lifetime
  lifetimeMode: !input lifetimeMode
  effect: !input effect
  duration: !input duration

trigger:
  - platform: state
    entity_id:
      - !input airnow_sensor
      - !input accuweather_aqi_day0
      - !input accuweather_aqi_day1
      - !input accuweather_aqi_day2
      - !input accuweather_aqi_day3
      - !input accuweather_aqi_day4
  - platform: time_pattern
    minutes: !input update_interval

condition: []

action:
  - variables:
      device_ids: !input awtrix
      app_topic: !input app_name
      
      payload_json: >
        {# Macro to get color from numerical AQI value (for AirNow) #}
        {%- macro get_aqi_color_from_value(value) -%}
          {%- set v = value | int(0) -%}
          {%- if v <= 49 -%}#00FF00        {# 0-49: Bright Green #}
          {%- elif v <= 99 -%}#FFFF00     {# 50-99: Bright Yellow #}
          {%- elif v <= 149 -%}#FFA500    {# 100-149: Pumping Orange #}
          {%- elif v <= 249 -%}#FF1493    {# 150-249: Deep Pink #}
          {%- else -%}#FF0000             {# 250+: Bright Red #}
          {%- endif -%}
        {%- endmacro -%}

        {# Macro to get color from text state (for AccuWeather forecast) #}
        {%- macro get_forecast_color_from_text(state) -%}
          {%- if state == 'good' -%}#00FF00 {# Bright Green #}
          {%- elif state == 'moderate' -%}#FFFF00 {# Bright Yellow #}
          {%- elif state == 'unhealthy' -%}#FFA500 {# Pumping Orange #}
          {%- elif state == 'very_unhealthy' -%}#FF1493 {# Deep Pink #}
          {%- elif state == 'hazardous' -%}#FF0000 {# Bright Red #}
          {%- else -%}#808080 {# Default Gray #}
          {%- endif -%}
        {%- endmacro -%}
        
        {% set forecast_values = [
          accuweather_today,
          accuweather_day1,
          accuweather_day2,
          accuweather_day3,
          accuweather_day4
        ] %}

        {% set forecast_positions = [
          [10, 7], [14, 7], [18, 7], [22, 7], [26, 7]
        ] %}

        {
          "lifetime": {{ lifetime }},
          "lifetimeMode": {{ lifetimeMode }},
          {% if effect != "None" %}
          "effect": "{{ effect }}",
          {% endif %}
          "duration": {{ duration | int }},
          "draw": [
            {"db": [0,0,8,8,[5029628,5029628,0,0,0,0,0,0,5029628,0,5029628,0,16777215,0,0,0,5029628,5029628,5029628,16777215,0,16777215,0,2425087,5029628,0,5029628,16777215,0,16777215,0,2425087,5029628,0,5029628,16777215,0,16777215,0,2425087,0,0,0,0,16777215,16777215,16777215,2425087,0,0,0,0,0,0,0,2425087,0,65280,16776960,16753920,16716947,16711680,0,0]]},
            
            {# ONLY display the AirNow AQI value, centered in the area to the right of the icon #}
            {% if airnow_current < 10 %}
              {# Centered for 1 digit #}
              {"dt": [18, 1, "{{ airnow_current }}", "{{ get_aqi_color_from_value(airnow_current) }}"]},
            {% elif airnow_current < 100 %}
              {# Centered for 2 digits #}
              {"dt": [16, 1, "{{ airnow_current }}", "{{ get_aqi_color_from_value(airnow_current) }}"]},
            {% else %}
              {# Centered for 3 digits #}
              {"dt": [14, 1, "{{ airnow_current }}", "{{ get_aqi_color_from_value(airnow_current) }}"]},
            {% endif %}

            {# Draw forecast lines using the text-based color logic #}
            {% for i in range(5) %}
              {"dl": [{{ forecast_positions[i][0] }}, {{ forecast_positions[i][1] }}, {{ forecast_positions[i][0] + 2 }}, {{ forecast_positions[i][1] }}, "{{ get_forecast_color_from_text(forecast_values[i]) }}"]}{% if not loop.last %},{% endif %}
            {% endfor %}
          ]
        }

  - variables:
      message_topics: >-
        {%- macro get_device_topic(device_id) -%}
          {{- states((device_entities(device_id) | select('search','device_topic') | list)[0]) -}}
        {%- endmacro -%}
        {%- set ns = namespace(devices=[]) -%}
        {%- for device_id in device_ids -%}
          {%- set device_topic = get_device_topic(device_id) | trim -%}
          {%- if device_topic and device_topic not in ['unavailable', 'unknown'] -%}
            {%- set ns.devices = ns.devices + [ device_topic ~ '/custom/' ~ app_topic] -%}
          {%- endif -%}
        {%- endfor -%}
        {{ ns.devices | list }}

  - repeat:
      for_each: "{{ message_topics }}"
      sequence:
        - service: mqtt.publish
          data:
            qos: 0
            retain: false
            topic: "{{ repeat.item }}"
            payload: "{{ payload_json }}"
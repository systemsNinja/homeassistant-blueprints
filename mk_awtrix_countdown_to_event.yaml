blueprint:
  name: AWTRIX Countdown to Date/Time
  description: >
    Displays a countdown to a selected date and time on an AWTRIX Light device.
    The countdown format changes as the event gets closer (days/hours -> hours/minutes -> minutes).
    When the event time is reached, it displays a custom message for a configurable duration and then removes the app.
  domain: automation
  input:
    awtrix:
      name: AWTRIX Light Device(s)
      description: Select the Awtrix Light device(s) to display the countdown.
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          multiple: true
    target_datetime:
      name: Target Date/Time
      description: Enter the target date and time for the countdown.
      selector:
        datetime:
    app_name:
      name: AWTRIX App Name
      description: A unique name for the custom app on AWTRIX (e.g., countdown_vacation).
      default: "countdown"
      selector:
        text:
    event_name:
      name: Event Name
      description: The name of the event you are counting down to (e.g., Vacation).
      selector:
        text:
    icon:
      name: Icon (Optional)
      description: The AWTRIX icon ID to display with the countdown.
      default: ""
      selector:
        text:
    event_duration:
      name: Event Message Duration (Minutes)
      description: How long the final event message should display after the event time is reached.
      default: 60
      selector:
        number:
          min: 1
          max: 1440
          step: 1
          mode: slider
    text_color:
      name: Text Color (Optional)
      description: Set a color for the text. Overridden by Rainbow Effect.
      selector:
        color_rgb:
      default: [255, 255, 255]
    rainbow_effect:
      name: Rainbow Effect
      description: Enable to make the text cycle through rainbow colors.
      default: false
      selector:
        boolean:

variables:
  # --- Inputs ---
  awtrix_devices: !input awtrix
  target_datetime: !input target_datetime
  app_name: !input app_name
  event_name: !input event_name
  icon: !input icon
  event_duration: !input event_duration
  text_color: !input text_color
  rainbow_effect: !input rainbow_effect

trigger:
  # Run every minute to update the countdown
  - platform: time_pattern
    minutes: "/1"
  # Run once on Home Assistant start to ensure the app is created
  - platform: homeassistant
    event: start

action:
  - variables:
      awtrix_topics: >-
        {%- set ns = namespace(topics = []) -%}
        {%- for device_id in awtrix_devices -%}
          {%- set entity = expand(device_entities(device_id)) | select('search', 'device_topic') | map(attribute='entity_id') | first -%}
          {%- set topic = states(entity) -%}
          {% set ns.topics = ns.topics + [topic] -%}
        {%- endfor -%}
        {{ ns.topics }}
      time_left: "{{ (as_timestamp(target_datetime) - as_timestamp(now())) | int }}"
      duration_seconds: "{{ event_duration * 60 }}"

  - choose:
      # Case 1: Countdown is active
      - conditions:
          - "{{ time_left > 0 }}"
        sequence:
          - variables:
              days: "{{ (time_left / 86400) | int }}"
              hours: "{{ ((time_left % 86400) / 3600) | int }}"
              minutes: "{{ ((time_left % 3600) / 60) | int }}"
              countdown_text: >-
                {% if days > 0 %}
                  {{ event_name }} in {{ days }}d {{ hours }}h
                {% elif hours > 0 %}
                  {{ event_name }} in {{ hours }}h {{ minutes }}m
                {% else %}
                  {{ event_name }} in {{ minutes }}m
                {% endif %}
          - service: mqtt.publish
            data:
              topic: "{{ awtrix_topics[0] ~ '/custom/' ~ app_name }}"
              payload: >-
                {% set payload_dict = {"text": countdown_text, "icon": icon} %}
                {% if rainbow_effect %}
                  {% do payload_dict.update({"rainbow": true}) %}
                {% elif text_color is defined and text_color != none %}
                  {% set hex_color = '#%02x%02x%02x' % (text_color[0], text_color[1], text_color[2]) %}
                  {% do payload_dict.update({"color": hex_color }) %}
                {% endif %}
                {{ payload_dict | to_json }}

      # Case 2: Event message is active
      - conditions:
          - "{{ 0 >= time_left > -duration_seconds }}"
        sequence:
          - service: mqtt.publish
            data:
              topic: "{{ awtrix_topics[0] ~ '/custom/' ~ app_name }}"
              payload: >-
                {% set payload_dict = {"text": "Its time for " ~ event_name ~ "!", "icon": icon} %}
                {% if rainbow_effect %}
                  {% do payload_dict.update({"rainbow": true}) %}
                {% elif text_color is defined and text_color != none %}
                  {% set hex_color = '#%02x%02x%02x' % (text_color[0], text_color[1], text_color[2]) %}
                  {% do payload_dict.update({"color": hex_color }) %}
                {% endif %}
                {{ payload_dict | to_json }}

    # Default Case: Time is up, remove the app
    default:
      - service: mqtt.publish
        data:
          topic: "{{ awtrix_topics[0] ~ '/custom/' ~ app_name }}"
          payload: "{}"

mode: single
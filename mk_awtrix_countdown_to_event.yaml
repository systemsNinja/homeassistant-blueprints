blueprint:
  name: AWTRIX Countdown to Date/Time
  description: >
    Countdown to a selected date/time using AWTRIX Light via MQTT.
    Removes the app from AWTRIX rotation when the event is reached.
  domain: automation
  input:
    awtrix:
      name: AWTRIX Light Device(s)
      description: Select the Awtrix Light device(s) to display the countdown.
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          multiple: true
    target_datetime:
      name: Target Date/Time
      description: Enter the target date and time for the countdown (e.g., 2024-06-10 18:00:00).
      selector:
        datetime:
    app_name:
      name: AWTRIX App Name
      description: The name for the custom app on AWTRIX. This should be unique.
      default: "countdown"
      selector:
        text:

variables:
  device_ids: !input awtrix
  target_datetime: !input target_datetime
  app_name: !input app_name
  awtrix_devices: >-
    {%- set ns = namespace(awtrix = []) -%}
    {%- for device_id in device_ids -%}
      {%- set entity = expand(device_entities(device_id)) | select('search', 'device_topic') | map(attribute='entity_id') | first -%}
      {%- set topic = states(entity) -%}
      {% set ns.awtrix = ns.awtrix + [{"entity": entity, "topic": topic}] -%}
    {%- endfor -%}
    {{ ns.awtrix }}
  target_ts: "{{ as_timestamp(states(input_datetime)) }}"
  now_ts: "{{ as_timestamp(now()) }}"
  countdown: "{{ (target_ts - now_ts) | int }}"
  payload_countdown: >-
    {% if countdown > 0 %}
      {"app":"{{ app_name }}","countdown":{{ countdown }}}
    {% else %}
      {}
    {% endif %}

trigger:
  - platform: time_pattern
    minutes: "/1"
  - platform: state
    entity_id: "{{ target_datetime }}"

action:
  - repeat:
      for_each: "{{ awtrix_devices }}"
      sequence:
        - service: mqtt.publish
          data:
            topic: "{{ repeat.item.topic ~ '/custom/' ~ app_name }}"
            payload: "{{ payload_countdown }}"
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ countdown <= 0 }}"
              sequence:
                - service: mqtt.publish
                  data:
                    topic: "{{ repeat.item.topic ~ '/custom/' ~ app_name }}"
                    payload: "{}"

mode: single

blueprint:
  name: AWTRIX Countdown to Date/Time
  description: >
    Displays a countdown to a selected date and time on an AWTRIX Light device.
    The countdown format changes as the event gets closer (days/hours -> hours/minutes -> minutes).
    When the event time is reached, it displays a custom message for one hour and then removes the app.
  domain: automation
  input:
    awtrix:
      name: AWTRIX Light Device(s)
      description: Select the Awtrix Light device(s) to display the countdown.
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          multiple: true
    target_datetime:
      name: Target Date/Time
      description: Enter the target date and time for the countdown.
      selector:
        datetime:
    app_name:
      name: AWTRIX App Name
      description: A unique name for the custom app on AWTRIX (e.g., countdown_vacation).
      default: "countdown"
      selector:
        text:
    event_name:
      name: Event Name
      description: The name of the event you are counting down to (e.g., Vacation).
      selector:
        text:
    icon:
      name: Icon (Optional)
      description: The AWTRIX icon ID to display with the countdown.
      default: ""
      selector:
        text:
    repeat_count:
      name: Scroll Repeat Count
      description: Set how many times the text scrolls. This determines the app's display duration.
      default: 1
      selector:
        number:
          min: 0
          max: 10
          step: 1
          mode: slider
    text_color:
      name: Text Color (Optional)
      description: Set a color for the text. Overridden by Rainbow Effect.
      selector:
        color_rgb:
    rainbow_effect:
      name: Rainbow Effect
      description: Enable to make the text cycle through rainbow colors.
      default: false
      selector:
        boolean:

variables:
  # --- Inputs ---
  device_ids: !input awtrix
  target_datetime: !input target_datetime
  app_name: !input app_name
  event_name: !input event_name
  icon: !input icon
  repeat_count: !input repeat_count
  text_color: !input text_color
  rainbow_effect: !input rainbow_effect

  # --- Device Topic Derivation ---
  awtrix_devices: >-
    {%- set ns = namespace(awtrix = []) -%}
    {%- for device_id in device_ids -%}
      {%- set entity = expand(device_entities(device_id)) | select('search', 'device_topic') | map(attribute='entity_id') | first -%}
      {%- set topic = states(entity) -%}
      {% set ns.awtrix = ns.awtrix + [{"entity": entity, "topic": topic}] -%}
    {%- endfor -%}
    {{ ns.awtrix }}

  # --- Countdown & Payload Logic ---
  payload: >-
    {% set time_left = (as_timestamp(target_datetime) - as_timestamp(now())) | int %}
    {% if time_left > 0 %}
      {# Calculate days, hours, and minutes for the countdown text #}
      {% set days = (time_left / 86400) | int %}
      {% set hours = ((time_left % 86400) / 3600) | int %}
      {% set minutes = ((time_left % 3600) / 60) | int %}
      
      {# Format the countdown text based on how much time is left #}
      {% if days > 0 %}
        {% set countdown_text = event_name ~ " in " ~ days ~ "d " ~ hours ~ "h" %}
      {% elif hours > 0 %}
        {% set countdown_text = event_name ~ " in " ~ hours ~ "h " ~ minutes ~ "m" %}
      {% else %}
        {% set countdown_text = event_name ~ " in " ~ minutes ~ "m" %}
      {% endif %}

      {# Generate the JSON payload for the countdown #}
      {% set payload_dict = {"text": countdown_text, "icon": icon, "repeat": repeat_count} %}
      {% if rainbow_effect %}
        {% do payload_dict.update({"rainbow": true}) %}
      {% elif text_color is defined and text_color != none %}
        {% set hex_color = '#%02x%02x%02x' % (text_color[0], text_color[1], text_color[2]) %}
        {% do payload_dict.update({"color": hex_color }) %}
      {% endif %}
      {{ payload_dict | to_json }}

    {% elif 0 >= time_left > -3600 %}
      {# Generate the JSON payload for the final message (displays for 1 hour) #}
      {% set payload_dict = {"text": "Its time for " ~ event_name ~ "!", "icon": icon, "repeat": repeat_count} %}
      {% if rainbow_effect %}
        {% do payload_dict.update({"rainbow": true}) %}
      {% elif text_color is defined and text_color != none %}
        {% set hex_color = '#%02x%02x%02x' % (text_color[0], text_color[1], text_color[2]) %}
        {% do payload_dict.update({"color": hex_color }) %}
      {% endif %}
      {{ payload_dict | to_json }}

    {% else %}
      {# Generate an empty payload to remove the app after the event #}
      {}
    {% endif %}

trigger:
  # Run every minute to update the countdown
  - platform: time_pattern
    minutes: "/1"
  # Run once on Home Assistant start to ensure the app is created
  - platform: homeassistant
    event: start

action:
  - repeat:
      for_each: "{{ awtrix_devices }}"
      sequence:
        - service: mqtt.publish
          data:
            topic: "{{ repeat.item.topic ~ '/custom/' ~ app_name }}"
            payload: "{{ payload }}"

mode: single

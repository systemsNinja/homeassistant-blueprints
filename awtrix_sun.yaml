blueprint:
  name: Sunrise and Sunset ☀️
  description: |
    This is a sunrise and sunset app for the AWTRIX Device

    ![](https://raw.githubusercontent.com/systemsNinja/homeassistant-blueprints/master/thumbnails/sunset.gif)

    ## ⚠️ REQUIREMENTS ⚠️

    1. You need the sun integration in home assistant

    2. You need to upload all icons used here to your AWTRIX device.
  domain: automation
  input:
    awtrix:
      name: AWTRIX Device
      description: Select the Awtrix device(s).
      selector:
        device:
          filter:
            - integration: mqtt
              manufacturer: Blueforcer
          multiple: true
    app_name:
      name: App Name
      description: >
        The name of the app to be displayed on the AWTRIX device.
      selector:
        text:
          max_length: 20
      default: "sun"

    #----------------------------------------
    # Sunrise Sunset Times :)
    #----------------------------------------
    sun_event_minute_threshold:
      name: Sun Time Prior 🕰️
      description: >-
        How many minutes before sunrise/sunset should the notification appear.
      selector:
        number:
          min: 5
          max: 1440
          unit_of_measurement: "min"
      default: 30

    sun_time_type:
      name: Sun Time Type
      description: >
        When showing a notification about sun rise/set it can offer 2 different time formats: Relative (`12 min`) or Actual (`8:31 pm`).
      selector:
        select:
          options:
            - Relative
            - Actual
      default: "Actual"

    sun_time_format:
      name: Actual Time Format
      description: >
        Select the time format for the sun rise/set notifications
      selector:
        select:
          options:
            - label: "13:30:45 (will scroll)"
              value: "%H:%M:%S"
            - label: "1:30:45 (will scroll)"
              value: "%I:%M:%S"
            - label: "13:30"
              value: "%H:%M"
            - label: "1:30"
              value: "%I:%M"
            - label: "1:30 PM (will scroll)"
              value: "%I:%M %p"
      default: "%H:%M"

    message_duration_riseset:
      name: Sun Rise/Set Duration ⏱️
      description: >-
        How long should the sunrise/sunset message remain on the screen (in seconds). *If you select `0` it will use the Global App Time*
      selector:
        number:
          min: 0
          max: 300
          unit_of_measurement: "sec"
      default: 30

    #-----------------------------------------
    # Icon Mappings
    #-----------------------------------------
    icon_sunrise:
      name: Icon for sunrise
      default: "w-sunrise"
      selector: { text: {} }
    icon_sunset:
      name: Icon for sunset
      default: "w-sunset"
      selector: { text: {} }
    update_interval:
      name: Update Interval
      description: >
        Updates will be sent as often as the forecast changes and whatever you set it here.
      selector:
        select:
          mode: dropdown
          options:
            - label: "1 minute"
              value: "/1"
            - label: "2 minutes"
              value: "/2"
            - label: "3 minutes"
              value: "/3"
            - label: "4 minutes"
              value: "/4"
            - label: "5 minutes"
              value: "/5"
            - label: "10 minutes"
              value: "/10"
            - label: "30 minutes"
              value: "/30"
      default: "/5"

    lifetime:
      name: Lifetime of the app if automation is not running
      description: >-
        Defines how long the app should stay alive after the last update if nothing is updating it. Time is from the time of the last update.
      selector:
        select:
          mode: dropdown
          options:
            - label: "5 minutes"
              value: "300"
            - label: "10 minutes"
              value: "600"
            - label: "30 minutes"
              value: "1800"
      default: "300"
    lifetimeMode:
      name: Lifetime Mode
      description: What happens after the app's lifetime expires.
      selector:
        select:
          options:
            - label: "Remove app from rotation"
              value: "0"
            - label: "Show a 'stale' indicator"
              value: "1"
      default: "0"
mode: restart
variables:
  device_ids: !input awtrix
  app_topic: !input app_name
  topics: >-
    {%- macro get_device_topic(device_id) %}
    {{ states((device_entities(device_id) | select('search','device_topic') | list)[0]) }}
    {%- endmacro %}

    {%- set ns = namespace(devices=[]) %}
    {%- for device_id in device_ids %}
      {%- set device=get_device_topic(device_id)|replace(' ','') %}
      {% set ns.devices = ns.devices + [ device ~ '/custom/' ~ app_topic] %}
    {%- endfor %}
    {{ ns.devices | reject('match','unavailable') | list}}
  lifetime: !input lifetime
  lifetimeMode: !input lifetimeMode

  # ------------------------------
  # SUN THINGS
  # ------------------------------
  sun_event_minute_threshold: !input sun_event_minute_threshold
  sun_time_type: !input sun_time_type
  sun_time_format: !input sun_time_format
  icon_sunrise: !input icon_sunrise
  icon_sunset: !input icon_sunset
  update_interval: !input update_interval
  message_duration_riseset: !input message_duration_riseset

  sun_next_event: >-
    {%- set rise = state_attr('sun.sun','next_rising') %}
    {%- set set = state_attr('sun.sun','next_setting') %}
    {%- set ts_rise = rise |as_timestamp %}
    {%- set ts_set = set |as_timestamp %}
    {{ iif(ts_set < ts_rise,'sunset','sunrise') }}

  sun_min_until_next_event: >-
    {%- set rise = state_attr('sun.sun','next_rising') %}
    {%- set set = state_attr('sun.sun','next_setting') %}
    {%- set ts_rise = rise |as_timestamp %}
    {%- set ts_set = set |as_timestamp %}
    {{ iif(sun_next_event == 'sunrise',(ts_rise - utcnow()|as_timestamp) / 60,(ts_set - utcnow()|as_timestamp) / 60) | round(0) }}

  sun_next_str: >-
    {%- set rise = state_attr('sun.sun','next_rising') %}
    {%- set set = state_attr('sun.sun','next_setting') %}
    {%- set ts_rise = rise |as_timestamp %}
    {%- set ts_set = set |as_timestamp %}
    {%- if sun_time_type == 'Actual' %}
      {{ iif(sun_next_event == 'sunrise',(ts_rise | as_datetime | as_local).strftime(sun_time_format), (ts_set | as_datetime | as_local).strftime(sun_time_format)) }}
    {%- else %}
    {#- relative time -#}
      {% set minutes_total = sun_min_until_next_event | int %}
      {% set hours = minutes_total // 60 %}
      {% set remaining_minutes = minutes_total % 60 %}

      {% if hours == 0 %}
        {{ remaining_minutes }} min
      {% else %}
        [
          {"t":"{{hours}}", "c":"#ffffff"},
          {"t":"h", "c":"#9c9d97"},
          {"t":"{{remaining_minutes}}", "c":"#ffffff"},
          {"t":"m", "c":"#9c9d97"}
        ]
      {% endif %}
    {%- endif %}
  sun_event_icon: >-
    {{ iif(sun_next_event == 'sunrise', icon_sunrise, icon_sunset) }}
  sun_event_payload: >-
    {% if sun_next_str is defined and sun_next_str.strip().startswith('[') %}
    {"icon":"{{sun_event_icon}}", "text":{{sun_next_str}}, "duration": {{message_duration_riseset}}, "lifetime": {{ lifetime }}, "lifetimeMode": {{ lifetimeMode }}}
    {% else %}
    {"icon":"{{sun_event_icon}}", "text":"{{sun_next_str}}", "duration": {{message_duration_riseset}}, "lifetime": {{ lifetime }}, "lifetimeMode": {{ lifetimeMode }}}
    {% endif %}
  # FIXED: Removed the enable/disable boolean logic. The automation will now always
  # check the time and send a notification if the threshold is met.
  sun_payload: >-
    {{ iif(sun_event_minute_threshold >= sun_min_until_next_event, sun_event_payload, "{}") }}


trigger:
  - platform: time_pattern
    minutes: !input update_interval
condition: []
action:
  - repeat:
      for_each: "{{ topics }}"
      sequence:
        - service: mqtt.publish
          data:
            qos: 0
            retain: false
            topic: "{{ repeat.item }}"
            payload: >
              {{sun_payload}}

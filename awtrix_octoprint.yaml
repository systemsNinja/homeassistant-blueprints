blueprint:
  name: "AWTRIX 3D Print Status - Octoprint"
  description: "This blueprint will show the status of your 3d print, with help of the Octoprint intergration"
  domain: automation
  input:
    awtrix:
      name: AWTRIX Device
      description: Select the Awtrix Device(s).
      selector:
        device:
          filter:
            - integration: mqtt
              manufacturer: Blueforcer
          multiple: true
    app_name:
      name: Custom App Name
      description: This is the app name used in the MQTT topic. It must be unique for each app you create.
      selector:
        text: {}
      default: "octoprint"
    3dprint_progress_sensor:
      name: Current 3D Print Progress Percent Sensor
      description: Current 3D Print progress percent
      selector:
        entity:
          multiple: false
          filter:
            - integration: octoprint
    3dprint_current_state_sensor:
      name: Current 3D Print State sensor
      description: Current 3D Print State 
      selector:
        entity:
          multiple: false
          filter:
            - integration: octoprint
    3dprint_current_file_sensor:
      name: Current 3D Print File Sensor
      description: Current 3D File Being Printed
      selector:
        entity:
          multiple: false
          filter:
            - integration: octoprint
    3dprint_icon:
      name: Icon
      description: Enter the Icon Name or ID of the icon that you like to show.
      selector:
        text:
      default: "51841"
    push_icon:
      name: Icon Behavior
      description: Select how the icon should be displayed.
      selector:
        select:
          options:
            - label: "Icon doesn't move"
              value: "0"
            - label: "Icon moves with text"
              value: "1"
            - label: "Icon moves & reappears"
              value: "2"
            - label: "No Icon"
              value: "3"
          mode: dropdown
      default: "0"
    txt_color_printing:
      name: Text Color Printing State
      description: Select the Text color
      selector:
        color_rgb:
      default: [255, 255, 255]
    txt_color_paused:
      name: Text Color Paused State
      description: Select the Text color
      selector:
        color_rgb:
      default: [255, 255, 0]
    txt_color_complete:
      name: Text Color Complete State
      description: Select the Text color
      selector:
        color_rgb:
      default: [66, 245, 75]
    stack_notification:
      name: Stack notification
      description: Should the notifications be stacked?
      selector:
        boolean:
      default: false
    scroll_speed:
      name: Scrolling Speed
      description: How fast should the text scroll. 50 = üê¢ | 250 = üêÜ
      selector:
        number:
          min: 50
          max: 250
          step: 25
          mode: slider
      default: 100
    repeat_count:
      name: Scroll Repeat Count
      description: How many times the text should scroll. 0 scrolls until the app's duration ends.
      default: 2
      selector:
        number:
          min: 0
          max: 10
          step: 1
          mode: slider
    duration:
      name: Duration (in seconds)
      description: Sets how long the app should be displayed in the rotation.
      selector:
        number:
          min: 1
          max: 60
          step: 1
          mode: slider
      default: 10

variables:
  device_id: !input awtrix
  awtrix: "{{ iif( device_attr(device_id, 'name_by_user') != none, device_attr(device_id,'name_by_user'), device_attr(device_id, 'name') ) }}"
  app_name: !input app_name
  message_topic: "{{awtrix ~ '/custom/' ~ app_name }}"
  icon: !input 3dprint_icon
  notify_topic: "{{awtrix ~ '/notify'}}"
  sensor_progress: !input 3dprint_progress_sensor
  3dprint_current_file_sensor: !input 3dprint_current_file_sensor
  sensor_current_state: !input 3dprint_current_state_sensor
  txt_color_printing: !input txt_color_printing
  txt_color_paused: !input txt_color_paused
  txt_color_complete: !input txt_color_complete
  stack_notification: !input stack_notification
  push_icon: !input push_icon
  duration: !input duration
  scroll_speed: !input scroll_speed
  repeat_count: !input repeat_count

trigger:
  - platform: state
    entity_id:
      - !input 3dprint_progress_sensor
  - platform: state
    entity_id:
      - !input 3dprint_current_state_sensor
condition:
  - condition: not
    conditions:
      - condition: state
        entity_id: !input 3dprint_current_state_sensor
        state: unavailable
      - condition: state
        entity_id: !input 3dprint_current_state_sensor
        state: unknown
      - condition: state
        entity_id: !input 3dprint_current_state_sensor
        state: operational
action:
  - if:
      - condition: state
        entity_id: !input 3dprint_current_state_sensor
        state: printing
    then:
      - service: mqtt.publish
        data:
          topic: "{{ message_topic }}"
          payload: |-
            {   
              "text": "{{ states(sensor_progress) }}%",
              "icon": "{{ icon }}",
              "progress": "{{ states(sensor_progress) }}",
              "pushIcon": {{ push_icon }},
              "color": {{ txt_color_printing }},
              "duration": {{ duration }},
              "repeat": {{ repeat_count }},
              "scrollSpeed": {{ scroll_speed }}
            }
    else:
      - service: mqtt.publish
        data:
          topic: "{{ message_topic }}"
  - if:
      - condition: state
        entity_id: !input 3dprint_current_state_sensor
        state: paused
    then:
      - service: mqtt.publish
        data:
          topic: "{{ notify_topic }}"
          payload: |-
            {   
              "text": "{{ states(sensor_current_state) }}",
              "icon": "{{ icon }}",
              "stack": {{ iif(stack_notification, "true", "false") }},
              "color": {{ txt_color_paused }},
              "pushIcon": {{ push_icon }},
              "duration": {{ duration }},
              "repeat": {{ repeat_count }},
              "scrollSpeed": {{ scroll_speed }}
            }

  - if:
      - condition: state
        entity_id: !input 3dprint_current_state_sensor
        state: complete
    then:
      - service: mqtt.publish
        data:
          topic: "{{ notify_topic }}"
          payload: |-
            {   
              "text": "{{ states(sensor_current_state) }}",
              "icon": "{{ icon }}",
              "stack": {{ iif(stack_notification, "true", "false") }},
              "color": {{ txt_color_complete }},
              "pushIcon": {{ push_icon }},
              "duration": {{ duration }},   
              "repeat": {{ repeat_count }},
              "scrollSpeed": {{ scroll_speed }}
            }
mode: restart
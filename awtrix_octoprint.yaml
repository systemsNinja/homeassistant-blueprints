blueprint:
  name: "AWTRIX Octoprint - 3D Print Status"
  description: "This blueprint will show the status of your 3d print, with help of the Octoprint intergration"
  domain: automation
  input:
    awtrix:
      name: AWTRIX Device
      description: Select the Awtrix Device(s).
      selector:
        device:
          filter:
            - integration: mqtt
              manufacturer: Blueforcer
          multiple: true
    app_name:
      name: Custom App Name
      description: This is the app name used in the MQTT topic. It must be unique for each app you create.
      selector:
        text: {}
      default: "octoprint"
    progress_sensor:
      name: Current 3D Print Progress Percent Sensor
      description: Current 3D Print progress percent
      selector:
        entity:
          multiple: false
          filter:
            - integration: octoprint
    current_state_sensor:
      name: Current 3D Print State sensor
      description: Current 3D Print State
      selector:
        entity:
          multiple: false
          filter:
            - integration: octoprint
    current_file_sensor:
      name: Current 3D Print File Sensor
      description: Current 3D File Being Printed
      selector:
        entity:
          multiple: false
          filter:
            - integration: octoprint
    estimated_finish_sensor:
      name: Current 3D Print Estimated Finish Sensor
      description: Current 3D Print Estimated Finish Time
      selector:
        entity:
          multiple: false
          filter:
            - integration: octoprint
    icon:
      name: Icon
      description: Enter the Icon Name or ID of the icon that you like to show.
      selector:
        text:
      default: "51841"
    push_icon:
      name: Icon Behavior
      description: Select how the icon should be displayed.
      selector:
        select:
          options:
            - label: "Icon doesn't move"
              value: "0"
            - label: "Icon moves with text"
              value: "1"
            - label: "Icon moves & reappears"
              value: "2"
            - label: "No Icon"
              value: "3"
          mode: dropdown
      default: "0"
    txt_color_printing:
      name: Text Color Printing State
      description: Select the Text color
      selector:
        color_rgb:
      default: [255, 255, 255]
    txt_color_paused:
      name: Text Color Paused State
      description: Select the Text color
      selector:
        color_rgb:
      default: [255, 255, 0]
    txt_color_complete:
      name: Text Color Complete State
      description: Select the Text color
      selector:
        color_rgb:
      default: [66, 245, 75]
    stack_notification:
      name: Stack notification
      description: Should the notifications be stacked?
      selector:
        boolean:
      default: false
    scroll_speed:
      name: Scrolling Speed
      description: How fast should the text scroll. 50 = 🐢 | 250 = 🐆
      selector:
        number:
          min: 50
          max: 250
          step: 25
          mode: slider
      default: 100
    repeat_count:
      name: Scroll Repeat Count
      description: How many times the text should scroll. 0 scrolls until the app's duration ends.
      default: 2
      selector:
        number:
          min: 0
          max: 10
          step: 1
          mode: slider
    duration:
      name: Duration (in seconds)
      description: Sets how long the app should be displayed in the rotation.
      selector:
        number:
          min: 1
          max: 60
          step: 1
          mode: slider
      default: 10

variables:
  # Standard inputs
  app_name: !input app_name
  icon: !input icon
  sensor_progress: !input progress_sensor
  sensor_current_state: !input current_state_sensor
  sensor_estimated_finish: !input estimated_finish_sensor
  current_file_entity: !input current_file_sensor
  sensor_current_file: "{{ states(current_file_entity).split('_')[0] }}"
  txt_color_printing: !input txt_color_printing
  txt_color_paused: !input txt_color_paused
  txt_color_complete: !input txt_color_complete
  stack_notification: !input stack_notification
  push_icon: !input push_icon
  duration: !input duration
  scroll_speed: !input scroll_speed
  repeat_count: !input repeat_count
  # Process the list of selected AWTRIX devices to get their topics
  awtrix_device_ids: !input awtrix
  awtrix_devices: >-
    {%- set ns = namespace(awtrix = []) -%}
    {%- for device_id in awtrix_device_ids -%}
      {%- set device_name = iif(device_attr(device_id, 'name_by_user') != none, device_attr(device_id, 'name_by_user'), device_attr(device_id, 'name')) -%}
      {%- set entity = expand(device_entities(device_id)) | select('search', 'device_topic') | map(attribute='entity_id') | first -%}
      {%- if entity -%}
        {%- set topic = states(entity) -%}
        {% if topic not in ['unavailable', 'unknown'] %}
          {% set ns.awtrix = ns.awtrix + [{"device": device_name, "entity": entity, "topic": topic}] -%}
        {% endif %}
      {%- endif -%}
    {%- endfor -%}
    {{ ns.awtrix }}

trigger:
  - platform: state
    entity_id: !input progress_sensor
  - platform: state
    entity_id: !input current_state_sensor

condition:
  - condition: not
    conditions:
      - condition: state
        entity_id: !input current_state_sensor
        state: unavailable
      - condition: state
        entity_id: !input current_state_sensor
        state: unknown
      - condition: state
        entity_id: !input current_state_sensor
        state: Operational

action:
  - repeat:
      for_each: "{{ awtrix_devices }}"
      sequence:
        - variables:
            message_topic: "{{ repeat.item.topic ~ '/custom/' ~ app_name }}"
            notify_topic: "{{ repeat.item.topic ~ '/notify' }}"
        - choose:
            - conditions:
                - condition: state
                  entity_id: !input current_state_sensor
                  state: Printing
              sequence:
                - service: mqtt.publish
                  data:
                    topic: "{{ message_topic }}"
                    payload: |-
                      {
                        "text": "{{ sensor_current_file }} {{ states(sensor_progress) | round(0) }}%",
                        "icon": "{{ icon }}",
                        "progress": "{{ states(sensor_progress) | round(0) }}",
                        "pushIcon": {{ push_icon }},
                        "color": {{ txt_color_printing }},
                        "duration": {{ duration }},
                        "repeat": {{ repeat_count }},
                        "scrollSpeed": {{ scroll_speed }}
                      }
            - conditions:
                - condition: state
                  entity_id: !input current_state_sensor
                  state: Paused
              sequence:
                - service: mqtt.publish
                  data:
                    topic: "{{ notify_topic }}"
                    payload: |-
                      {
                        "text": "{{ states(sensor_current_state) }}",
                        "icon": "{{ icon }}",
                        "stack": {{ iif(stack_notification, "true", "false") }},
                        "color": {{ txt_color_paused }},
                        "pushIcon": {{ push_icon }},
                        "duration": {{ duration }},
                        "repeat": {{ repeat_count }},
                        "scrollSpeed": {{ scroll_speed }}
                      }
            - conditions:
                - condition: state
                  entity_id: !input current_state_sensor
                  state: complete
              sequence:
                - service: mqtt.publish
                  data:
                    topic: "{{ notify_topic }}"
                    payload: |-
                      {
                        "text": "{{ states(sensor_current_state) }}",
                        "icon": "{{ icon }}",
                        "stack": {{ iif(stack_notification, "true", "false") }},
                        "color": {{ txt_color_complete }},
                        "pushIcon": {{ push_icon }},
                        "duration": {{ duration }},
                        "repeat": {{ repeat_count }},
                        "scrollSpeed": {{ scroll_speed }}
                      }
          default:
            # This action clears the custom app screen if the state is not printing, paused, or complete
            - service: mqtt.publish
              data:
                topic: "{{ message_topic }}"
                payload: ""
mode: restart


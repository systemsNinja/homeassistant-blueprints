blueprint:
  name: "AWTRIX Octoprint - 3D Print Status"
  description: |
    ## This blueprint will show the status of your 3d print, with help of the Octoprint intergration ##

    Shows the current status of your 3D print on your AWTRIX device(s).
    It is a custom app that is removed when the print is finished.
    You can choose to show the filename, progress percentage, and estimated time left.

    ## ⚠️ REQUIREMENTS ⚠️

    1.  **Octoprint Integration:** You must have the official Octoprint integration installed. [Octoprint](https://www.home-assistant.io/integrations/octoprint/) 
        [![Add Octoprint integration](https://my.home-assistant.io/badges/config_flow_start.svg)](https://my.home-assistant.io/redirect/config_flow_start?domain=octoprint)
    2.  You need to upload any icon used here to your AWTRIX device. 

  domain: automation
  input:
    awtrix:
      name: AWTRIX Device
      description: Select the Awtrix Device(s).
      selector:
        device:
          filter:
            - integration: mqtt
              manufacturer: Blueforcer
          multiple: true
    app_name:
      name: Custom App Name
      description: This is the app name used in the MQTT topic. It must be unique for each app you create.
      selector:
        text: {}
      default: "octoprint"
    progress_sensor:
      name: Current 3D Print Progress Percent Sensor
      description: Current 3D Print progress percent
      selector:
        entity:
          multiple: false
          filter:
            - integration: octoprint
    current_state_sensor:
      name: Current 3D Print State sensor
      description: Current 3D Print State
      selector:
        entity:
          multiple: false
          filter:
            - integration: octoprint
    current_file_sensor:
      name: Current 3D Print File Sensor
      description: Current 3D File Being Printed
      selector:
        entity:
          multiple: false
          filter:
            - integration: octoprint
    estimated_finish_sensor:
      name: Current 3D Print Estimated Finish Sensor (UTC)
      description: "Sensor that provides the print's estimated finish time in UTC format"
      selector:
        entity:
          multiple: false
          filter:
            - integration: octoprint
    show_filename:
      name: Show Filename
      description: Toggle to show the name of the file being printed.
      selector:
        boolean: {}
      default: true
    show_progress_percentage:
      name: Show Progress Percentage
      description: Toggle to show the print progress percentage.
      selector:
        boolean: {}
      default: true
    show_time_left:
      name: Show Time Left
      description: Toggle to calculate and show the estimated time remaining from the finish time sensor.
      selector:
        boolean: {}
      default: true
    text_case:
      name: Text Case
      description: Select how you would like your text to display.
      selector:
        select:
          options:
            - label: "Use global AWTRIX setting"
              value: "0"
            - label: "Force Uppercase"
              value: "1"
            - label: "Show as is (Default)"
              value: "2"
          mode: dropdown
      default: "2"
    icon:
      name: Icon
      description: Enter the Icon Name or ID of the icon that you like to show.
      selector:
        text:
      default: "51841"
    push_icon:
      name: Icon & Progress Bar Behavior
      description: Select how the icon and progress bar should be displayed.
      selector:
        select:
          options:
            - label: "Icon doesn't move (with Progress Bar)"
              value: "0"
            - label: "Icon moves with text (No Progress Bar)"
              value: "1"
            - label: "Icon moves & reappears (No Progress Bar)"
              value: "2"
            - label: "No Icon (Progress Bar Only)"
              value: "3"
          mode: dropdown
      default: "0"
    txt_color_printing:
      name: Text Color Printing State
      description: Select the Text color
      selector:
        color_rgb:
      default: [255, 255, 255] # White
    rainbow_text_printing:
      name: Rainbow Text for Printing State
      description: Overrides the Printing state text color and makes the text a rainbow gradient.
      selector:
        boolean:
      default: false
    progress_bar_color:
      name: Progress Bar Color
      description: Select the color for the progress bar (if enabled by the icon behavior).
      selector:
        color_rgb:
      default: [0, 255, 00] # Green
    txt_color_paused:
      name: Text Color Paused State
      description: Select the Text color
      selector:
        color_rgb:
      default: [255, 165, 0] # Orange
    txt_color_complete:
      name: Text Color Complete State
      description: Select the Text color
      selector:
        color_rgb:
      default: [0, 255, 0]
    scroll_speed:
      name: Scrolling Speed
      description: How fast should the text scroll. 50 = 🐢 | 250 = 🐆
      selector:
        number:
          min: 50
          max: 250
          step: 25
          mode: slider
      default: 150
    repeat_count:
      name: Scroll Repeat Count
      description: How many times the text should scroll. 0 scrolls until the app's duration ends.
      default: 2
      selector:
        number:
          min: 0
          max: 10
          step: 1
          mode: slider
    duration:
      name: Duration (in seconds)
      description: Sets how long the app should be displayed in the rotation.
      selector:
        number:
          min: 1
          max: 60
          step: 1
          mode: slider
      default: 10
    lifetime:
      name: Lifetime of the app after no update from automation
      description: >-
        Defines how long the app should stay alive after there has been update from the automation. Completed prints auto removes after 5 minutes.
      selector:
        select:
          mode: dropdown
          options:
            - label: "5 minutes"
              value: "300"
            - label: "10 minutes"
              value: "600"
            - label: "15 minutes"
              value: "900"
            - label: "30 minutes"
              value: "1800"
            - label: "45 minutes"
              value: "2700"
            - label: "1 hour"
              value: "3600"
      default: "300"
    lifetimeMode:
      name: Lifetime Mode
      description: What happens after the app's lifetime expires.
      selector:
        select:
          options:
            - label: "Remove app from rotation"
              value: "0"
            - label: "Show a 'stale' indicator"
              value: "1"
      default: "0"
variables:
  # Standard inputs
  app_name: !input app_name
  icon: !input icon
  sensor_progress: !input progress_sensor
  sensor_current_state: !input current_state_sensor
  sensor_estimated_finish: !input estimated_finish_sensor
  current_file_entity: !input current_file_sensor
  sensor_current_file: "{{ states(current_file_entity).split('_')[0] }}"
  txt_color_printing: !input txt_color_printing
  rainbow_text_printing: !input rainbow_text_printing
  progress_bar_color: !input progress_bar_color
  txt_color_paused: !input txt_color_paused
  txt_color_complete: !input txt_color_complete
  text_case: !input text_case
  push_icon: !input push_icon
  duration: !input duration
  scroll_speed: !input scroll_speed
  repeat_count: !input repeat_count
  lifetime: !input lifetime
  lifetimeMode: !input lifetimeMode
  # Added toggler variables
  show_filename: !input show_filename
  show_progress_percentage: !input show_progress_percentage
  show_time_left: !input show_time_left
  # Process the list of selected AWTRIX devices to get their topics
  awtrix_device_ids: !input awtrix
  awtrix_devices: >-
    {%- set ns = namespace(awtrix = []) -%}
    {%- for device_id in awtrix_device_ids -%}
      {%- set device_name = iif(device_attr(device_id, 'name_by_user') != none, device_attr(device_id, 'name_by_user'), device_attr(device_id, 'name')) -%}
      {%- set entity = expand(device_entities(device_id)) | select('search', 'device_topic') | map(attribute='entity_id') | first -%}
      {%- if entity -%}
        {%- set topic = states(entity) -%}
        {% if topic not in ['unavailable', 'unknown'] %}
          {% set ns.awtrix = ns.awtrix + [{"device": device_name, "entity": entity, "topic": topic}] -%}
        {% endif %}
      {%- endif -%}
    {%- endfor -%}
    {{ ns.awtrix }}

trigger:
  - platform: state
    entity_id: !input progress_sensor
  - platform: state
    entity_id: !input current_state_sensor

condition:
  - condition: not
    conditions:
      - condition: state
        entity_id: !input current_state_sensor
        state: unavailable
      - condition: state
        entity_id: !input current_state_sensor
        state: unknown

action:
  - repeat:
      for_each: "{{ awtrix_devices }}"
      sequence:
        - variables:
            message_topic: "{{ repeat.item.topic ~ '/custom/' ~ app_name }}"
        - choose:
            - conditions:
                - condition: state
                  entity_id: !input current_state_sensor
                  state: Printing
              sequence:
                - service: mqtt.publish
                  data:
                    topic: "{{ message_topic }}"
                    payload: |-
                      {
                        "text": "{%- set parts = namespace(text=[]) -%}
                                  {%- if show_filename and sensor_current_file != 'unknown' -%}
                                    {%- set parts.text = parts.text + [sensor_current_file] -%}
                                  {%- endif -%}
                                  {%- if show_progress_percentage -%}
                                    {%- set parts.text = parts.text + [states(sensor_progress) | round(0) ~ '% done'] -%}
                                  {%- endif -%}
                                  {%- if show_time_left -%}
                                    {%- set finish_utc = states(sensor_estimated_finish) -%}
                                    {%- if finish_utc not in ['unknown', 'unavailable'] -%}
                                      {%- set remaining_seconds = as_timestamp(finish_utc) - as_timestamp(now()) -%}
                                      {%- if remaining_seconds > 0 -%}
                                        {%- if remaining_seconds < 3600 -%}
                                          {%- set minutes = (remaining_seconds / 60) | round(0, 'ceil') | int -%}
                                          {%- set time_str = minutes ~ 'm' -%}
                                        {%- else -%}
                                          {%- set hours = (remaining_seconds // 3600) | int -%}
                                          {%- set minutes = ((remaining_seconds % 3600) // 60) | int -%}
                                          {%- set time_str = hours ~ 'h ' ~ minutes ~ 'm' -%}
                                        {%- endif -%}
                                        {%- set parts.text = parts.text + [time_str ~ ' left'] -%}
                                      {%- endif -%}
                                    {%- endif -%}
                                  {%- endif -%}
                                  {{- parts.text | join(' - ') -}}",
                        "pushIcon": {{ push_icon if push_icon != "3" else "0" }},
                        "color": {{ txt_color_printing }},
                        "rainbow": {{ rainbow_text_printing | lower }},
                        "duration": {{ duration }},
                        "repeat": {{ repeat_count }},
                        "scrollSpeed": {{ scroll_speed }},
                        "textCase": {{ text_case }},
                        "lifetime": {{ lifetime }},
                        "lifetimeMode": {{ lifetimeMode }}
                        {%- if push_icon != "3" %}
                        ,"icon": "{{ icon }}"
                        {%- endif %}
                        {%- if push_icon == "0" or push_icon == "3" %}
                        ,"progress": {{ states(sensor_progress) | round(0) }},
                         "progressC": "{{ '%02x%02x%02x' | format(progress_bar_color[0], progress_bar_color[1], progress_bar_color[2]) }}"
                        {%- endif %}
                      }
            - conditions:
                - condition: state
                  entity_id: !input current_state_sensor
                  state: Paused
              sequence:
                - service: mqtt.publish
                  data:
                    topic: "{{ message_topic }}"
                    payload: |-
                      {
                        "text": "{{ states(sensor_current_state) }}",
                        "icon": "{{ icon }}",
                        "color": {{ txt_color_paused }},
                        "pushIcon": {{ push_icon }},
                        "duration": {{ duration }},
                        "repeat": {{ repeat_count }},
                        "scrollSpeed": {{ scroll_speed }},
                        "textCase": {{ text_case }},
                        "lifetime": {{ lifetime }},
                        "lifetimeMode": {{ lifetimeMode }}
                      }
            - conditions:
                - condition: template
                  value_template: "{{ states(sensor_progress) | float(0) == 100 }}"
              sequence:
                - service: mqtt.publish
                  data:
                    topic: "{{ message_topic }}"
                    payload: |-
                      {
                        "text": "{{ sensor_current_file }} Complete",
                        "icon": "{{ icon }}",
                        "color": {{ txt_color_complete }},
                        "pushIcon": {{ push_icon }},
                        "duration": {{ duration }},
                        "repeat": {{ repeat_count }},
                        "scrollSpeed": {{ scroll_speed }},
                        "textCase": {{ text_case }},
                        "lifetime": "300",
                        "lifetimeMode": "0"
                      }
          default:
            # This action clears the custom app screen if the state is not printing, paused, or 100% progress.
            - service: mqtt.publish
              data:
                topic: "{{ message_topic }}"
                payload: ""
mode: restart
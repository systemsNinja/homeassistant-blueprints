blueprint:
  name: AWTRIX Countdown to Date/Time
  description: >
    Displays a countdown to a selected date and time on an AWTRIX Light device.
    The countdown format changes as the event gets closer (days/hours -> hours/minutes -> minutes).
    When the event time is reached, it displays a custom message for a configurable duration and then removes the app.
  domain: automation
  input:
    awtrix:
      name: AWTRIX Light Device(s)
      description: Select the Awtrix Light device(s) to display the countdown.
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          multiple: true
    app_name:
      name: Custom App Name
      description: This is the app name listed in the MQTT topic. It should be unique.
      selector:
        text: {}
      default: "Countdown_timer"
    target_datetime:
      name: Target Date/Time
      description: Enter the target date and time for the countdown.
      selector:
        datetime:
    event_name:
      name: Event Name
      description: The name of the event you are counting down to (e.g., Vacation).
      selector:
        text:
    event_duration:
      name: Event Message Duration (Minutes)
      description: How long the final event message should display after the event time is reached.
      default: 60
      selector:
        number:
          min: 1
          max: 1440
          step: 1
          mode: slider
    icon:
      name: Icon (Optional)
      description: The AWTRIX icon ID to display with the countdown.
      default: ""
      selector:
        text:
    text_color:
      name: Text Color (Optional)
      description: Set a color for the text. Overridden by Rainbow Effect.
      selector:
        color_rgb: {}
      default: [160, 160, 0]
    rainbow_effect:
      name: Rainbow Effect
      description: Enable to make the text cycle through rainbow colors.
      default: false
      selector:
        boolean:
    effect:
      name: Background Effect
      description: The display effect to use for the background.
      selector:
        select:
          options:
            - "None"
            - "Fade"
            - "MovingLine"
            - "BrickBreaker"
            - "PingPong"
            - "Radar"
            - "Checkerboard"
            - "Fireworks"
            - "PlasmaCloud"
            - "Ripple"
            - "Snake"
            - "Pacifica"
            - "TheaterChase"
            - "Plasma"
            - "Matrix"
            - "SwirlIn"
            - "SwirlOut"
            - "LookingEyes"
            - "TwinklingStars"
            - "ColorWaves"
      default: "TwinklingStars"

    repeat_count:
      name: Scroll Repeat Count
      description: How many times the text should scroll. 0 means it scrolls until removed (default app time).
      default: 1
      selector:
        number:
          min: 0
          max: 10
          step: 1
          mode: slider
    update_unit:
      name: Update Unit
      description: Choose whether the update interval is in seconds or minutes.
      selector:
        select:
          options:
            - "seconds"
            - "minutes"
      default: "minutes"
    update_interval:
      name: Update Interval
      description: How often to send the stats to the device.
      selector:
        number:
          min: 1
          max: 59
          step: 1
          mode: slider
      default: 1
    lifetime_grace:
      name: Lifetime of the app after no update from automation
      description: >-
        Defines how long the app should stay alive after the last update.
        EX: If updating every 1 minute, and this is set to 30 seconds,
        the app will be removed 90 seconds (60s update + 30s grace) after the last update.
      selector:
        select:
          mode: dropdown
          options:
            - label: "1 minute"
              value: "60"
            - label: "2 minutes"
              value: "120"
            - label: "3 minutes"
              value: "180"
            - label: "4 minutes"
              value: "240"
            - label: "5 minutes"
              value: "300"
            - label: "10 minutes"
              value: "600"
            - label: "30 minutes"
              value: "1800"
      default: "120"

    lifetimeMode:
      name: Lifetime Mode
      description: What happens after the app's lifetime expires.
      selector:
        select:
          options:
            - label: "Remove app from rotation"
              value: "0"
            - label: "Show a 'stale' indicator"
              value: "1"
      default: "0"
variables:
  # --- Inputs ---
  awtrix_devices: !input awtrix
  target_datetime: !input target_datetime
  app_name: !input app_name
  event_name: !input event_name
  icon: !input icon
  repeat_count: !input repeat_count
  event_duration: !input event_duration
  text_color: !input text_color
  rainbow_effect: !input rainbow_effect
  effect: !input effect
  update_unit: !input update_unit
  update_interval: !input update_interval
  lifetime_grace: !input lifetime_grace
  lifetime: >
    {{ interval + (lifetime_grace | int) }}
  lifetimeMode: !input lifetimeMode

trigger:
  - platform: time_pattern
    seconds: "/1"   # fires every second

condition:
  - condition: template
    value_template: >-
      {% set interval = iif(update_unit == "minutes", update_interval * 60, update_interval) %}
      {{ (as_timestamp(now()) | int) % interval == 0 }}



action:
  - variables:
      time_left: "{{ (as_timestamp(target_datetime) - as_timestamp(now())) | int }}"
      duration_seconds: "{{ event_duration * 60 }}"
  - repeat:
      for_each: "{{ awtrix_devices }}"
      sequence:
        - variables:
            device_topic: >-
              {{ expand(device_entities(repeat.item)) | select('search', 'device_topic') | map(attribute='state') | first }}
        - choose:
            # Case 1: Countdown is active
            - conditions:
                - "{{ time_left > 0 }}"
              sequence:
                - variables:
                    days: "{{ (time_left / 86400) | int }}"
                    hours: "{{ ((time_left % 86400) / 3600) | int }}"
                    minutes: "{{ ((time_left % 3600) / 60) | int }}"
                    countdown_text: >-
                      {% if days > 0 %}
                        {{ event_name }} in {{ days }}d {{ hours }}h
                      {% elif hours > 0 %}
                        {{ event_name }} in {{ hours }}h {{ minutes }}m
                      {% else %}
                        {{ event_name }} in {{ minutes }}m
                      {% endif %}
                - service: mqtt.publish
                  data:
                    topic: "{{ device_topic ~ '/custom/' ~ app_name }}"
                    payload: >-
                      {
                        "text": "{{ countdown_text }}",
                        "icon": "{{ icon }}",
                        "repeat": {{ repeat_count }},
                        "effect": "{{ effect }}"
                        {% if rainbow_effect %}
                          , "rainbow": true
                        {% elif text_color is defined and text_color != none %}
                          , "color": "#{{ '%02x%02x%02x' % (text_color[0], text_color[1], text_color[2]) }}"
                        {% endif %}
                      }

            # Case 2: Event message is active
            - conditions:
                - "{{ 0 >= time_left > -duration_seconds }}"
              sequence:
                - service: mqtt.publish
                  data:
                    topic: "{{ device_topic ~ '/custom/' ~ app_name }}"
                    payload: >-
                      {
                        "text": "Its time for {{ event_name }}!",
                        "icon": "{{ icon }}",
                        "repeat": {{ repeat_count }},
                        "effect": "{{ effect }}"
                        {% if rainbow_effect %}
                          , "rainbow": true
                        {% elif text_color is defined and text_color != none %}
                          , "color": "#{{ '%02x%02x%02x' % (text_color[0], text_color[1], text_color[2]) }}"
                        {% endif %}
                      }

          # Default Case: Time is up, remove the app
          default:
            - service: mqtt.publish
              data:
                topic: "{{ device_topic ~ '/custom/' ~ app_name }}"
                payload: "{}"

mode: single

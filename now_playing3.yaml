blueprint:
  name: AWTRIX Now Playing
  description: >
    ## AWTRIX Now Playing ðŸŽ¹

    This blueprint displays the currently playing song from a media player on your AWTRIX Light device. It creates a custom app that automatically shows when music starts and disappears when it stops.

    ### Features
    - Shows scrolling artist and song title.
    - Displays a progress bar indicating the song's duration.
    - Works with multiple AWTRIX devices at the same time.

    ### Prerequisites
    - **AWTRIX Light Device**: An AWTRIX Light device running firmware v0.72 or newer.
    - **Spotify Integration**: For the progress bar to function correctly, you **must use** a `media_player` entity from the Spotify integration. Other media players might work for displaying text, but they often lack the required attributes for the progress bar.
    - **Custom Icon**: You need to upload a custom icon to your AWTRIX device. The default Spotify icon ID used in this blueprint is **18207**. You can upload this icon via the AWTRIX web interface.

  domain: automation
  input:
    awtrix:
      name: AWTRIX Light Device(s)
      description: Select the Awtrix Light device(s) to display the notification on.
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          multiple: true
    media_player:
      name: Media Player
      description: Select the Spotify media player entity to monitor.
      selector:
        entity:
          domain: media_player
    app_name:
      name: AWTRIX App Name
      description: The name for the custom app on AWTRIX. This should be unique.
      default: "spotify"
      selector:
        text:
    icon_id:
      name: Icon ID
      description: The Lametric Icon ID to display. Make sure this icon is uploaded to your device.
      default: "18207"
      selector:
        text:
    progress_color:
      name: Progress Bar Color
      description: The hex color for the progress bar (without the #).
      default: "18B04C"
      selector:
        text:

variables:
  device_ids: !input awtrix
  media_player_entity: !input media_player
  app_name: !input app_name
  icon_id: !input icon_id
  progress_color: !input progress_color
  awtrix_devices: >-
    {%- set ns = namespace(awtrix = []) -%}
    {%- for device_id in device_ids -%}
      {%- set entity = expand(device_entities(device_id)) | select('search', 'device_topic') | map(attribute='entity_id') | first -%}
      {%- set topic = states(entity) -%}
      {% set ns.awtrix = ns.awtrix + [{"entity": entity, "topic": topic}] -%}
    {%- endfor -%}
    {{ ns.awtrix }}
  payload_playing: >-
    {
      "text": "{{ state_attr(media_player_entity, 'media_artist') }} - {{ state_attr(media_player_entity, 'media_title') }}",
      "icon": "{{ icon_id }}",
      "rainbow": true,
      "repeat": 2,
      "pushIcon": 0,
      "textCase": 0,
      "textOffset": 15,
      {% set duration = state_attr(media_player_entity, 'media_duration') %}
      {% set position = state_attr(media_player_entity, 'media_position') %}
      "progress": {% if duration and duration > 0 %}{{ (position / duration * 100) | round(0) }}{% else %}0{% endif %},
      "progressC": "{{ progress_color }}"
    }

trigger:
  - platform: state
    entity_id: !input media_player

action:
  - repeat:
      for_each: "{{ awtrix_devices }}"
      sequence:
        - choose:
            - conditions:
                # Condition 1: Media player is playing music and AWTRIX is online
                - condition: state
                  entity_id: !input media_player
                  state: "playing"
                - condition: template
                  value_template: "{{ state_attr(media_player_entity, 'media_content_type') == 'music' }}"
                - condition: template
                  value_template: "{{ states(repeat.item.entity) not in ['unavailable', 'unknown'] }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item.topic ~ '/custom/' ~ app_name }}"
                    payload: "{{ payload_playing }}"
            - conditions:
                # Condition 2: Media player is NOT playing or AWTRIX is offline
                - condition: template
                  value_template: "{{ states(media_player_entity) != 'playing' }}"
                - condition: template
                  value_template: "{{ states(repeat.item.entity) not in ['unavailable', 'unknown'] }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item.topic ~ '/custom/' ~ app_name }}"
                    payload: "" # An empty payload removes the custom app

mode: single
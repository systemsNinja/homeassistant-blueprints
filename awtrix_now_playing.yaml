blueprint:
  name: AWTRIX Now Playing with Progress Bar
  description: >
    ## AWTRIX Now Playing ðŸŽ¹

    Shows the title and artist of your currently playing song on your AWTRIX device(s). 
    You can choose to display it as a temporary notification or as a persistent custom app that is removed when playback stops.

    ### Features
    - Shows scrolling artist and song title.
    - **Conditional song progress bar** based on icon behavior.
    - Can function as a one-time notification or a persistent custom app.
    - Highly customizable (colors, text case, icon behavior).
    - Works with multiple AWTRIX devices at the same time.

    ### Prerequisites
    - **AWTRIX Device**: An AWTRIX device running firmware v0.98.
    - **Spotify Integration**: For the progress bar to function correctly, you **must use** a `media_player` entity from the Spotify integration. Other media players might work for displaying text, but they often lack the required attributes (`media_position`, `media_duration`) for the progress bar.

  domain: automation
  author: N1c093 (Modified by SystemsNinja to add progress bar, effects, lifetime, etc)

  input:
    awtrix_devices:
      name: AWTRIX Device(s)
      description: Select the target Awtrix display(s).
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          multiple: true

    media_player:
      name: Media Player Entity
      description: Select your Media Player. For the progress bar, this must be a Spotify player.
      selector:
        entity:
          domain: media_player

    display_type:
      name: Display Mode (Custom App / Notification)
      description: Select if you want the information as a single notification or a persistent custom app.
      selector:
        select:
          options:
            - label: "Custom App (Stays until music stops)"
              value: "custom"
            - label: "Notification (Shows once per song)"
              value: "notify"
          mode: dropdown
      default: "custom"

    progress_bar_color:
      name: Progress Bar Color
      description: Select the color for the progress bar (if enabled by the icon behavior).
      selector:
        color_rgb:
      default: [24, 176, 76] # Spotify Green

    icon_in:
      name: Icon ID
      description: Enter the Icon Name or ID (e.g., 18207 for Spotify). Not used if "No Icon" is selected.
      selector:
        text:
      default: "18207"

    push_icon:
      name: Icon & Progress Bar Behavior
      description: Select how the icon and progress bar should be displayed.
      selector:
        select:
          options:
            - label: "Icon doesn't move (with Progress Bar)"
              value: "0"
            - label: "Icon moves with text (No Progress Bar)"
              value: "1"
            - label: "Icon moves & reappears (No Progress Bar)"
              value: "2"
            - label: "No Icon (Progress Bar Only)"
              value: "3"
          mode: dropdown
      default: "0"

    repeat_text:
      name: Repeat Scroll
      description: How many times the text should scroll. 0 means it scrolls until removed (default app time).
      default: 1
      selector:
        number:
          min: 0
          max: 10
          mode: slider

    text_case:
      name: Text Case
      description: Select how you would like your text to display.
      selector:
        select:
          options:
            - label: "Use global AWTRIX setting"
              value: "0"
            - label: "Force Uppercase"
              value: "1"
            - label: "Show as is (Default)"
              value: "2"
          mode: dropdown
      default: "2"

    background_color:
      name: Background Color
      description: Select the background color.
      selector:
        color_rgb:
      default: [0, 0, 0]

    text_color:
      name: Text Color
      description: Select the text color. Will be overridden by Rainbow effect if enabled.
      selector:
        color_rgb:
      default: [255, 255, 255]

    rainbox_text:
      name: Rainbow Colors
      description: Should the text be shown in Rainbow colors?
      selector:
        boolean:
      default: false

    effect:
      name: Effect
      description: The display effect to use for the background.
      selector:
        select:
          options:
            - "None"
            - "Fade"
            - "MovingLine"
            - "BrickBreaker"
            - "PingPong"
            - "Radar"
            - "Checkerboard"
            - "Fireworks"
            - "PlasmaCloud"
            - "Ripple"
            - "Snake"
            - "Pacifica"
            - "TheaterChase"
            - "Plasma"
            - "Matrix"
            - "SwirlIn"
            - "SwirlOut"
            - "LookingEyes"
            - "TwinklingStars"
            - "ColorWaves"
      default: "TwinklingStars"

    lifetime:
      name: Lifetime of the app if automation is not running
      description: >-
        Defines how long the app should stay alive after the last update if nothing is updating it. Time is from the time of the last update.
      selector:
        select:
          mode: dropdown
          options:
            - label: "15 seconds"
              value: "15"
            - label: "20 seconds"
              value: "20"
            - label: "30 seconds"
              value: "30"
            - label: "45 seconds"
              value: "45"
            - label: "1 minute"
              value: "60"
            - label: "2 minutes"
              value: "120"
            - label: "3 minutes"
              value: "180"
            - label: "4 minutes"
              value: "240"
            - label: "5 minutes"
              value: "300"
            - label: "10 minutes"
              value: "600"
            - label: "30 minutes"
              value: "1800"
      default: "30"
    lifetimeMode:
      name: Lifetime Mode
      description: What happens after the app's lifetime expires.
      selector:
        select:
          options:
            - label: "Remove app from rotation"
              value: "0"
            - label: "Show a 'stale' indicator"
              value: "1"
      default: "0"
variables:
  # Define all inputs as variables first
  device_ids: !input awtrix_devices
  media_player: !input media_player
  display_type: !input display_type
  icon_in: !input icon_in
  background_color: !input background_color
  text_color: !input text_color
  rainbox_text: !input rainbox_text
  text_case: !input text_case
  push_icon: !input push_icon
  repeat_text: !input repeat_text
  progress_bar_color: !input progress_bar_color
  effect: !input effect
  lifetime: !input lifetime
  lifetimeMode: !input lifetimeMode

  # Now, build the payload using the variables above
  payload_content: >-
    {
      "text": "{{ state_attr(media_player, 'media_artist') }} - {{ state_attr(media_player, 'media_title') }}"
      {%- if push_icon != "3" %},
      "icon": "{{ icon_in }}"
      {%- endif %},
      "background": {{ background_color }},
      "color": {{ text_color }},
      "rainbow": {{ rainbox_text | lower }},
      "textCase": {{ text_case }},
      "pushIcon": {{ push_icon if push_icon != "3" else "0" }},
      "repeat": {{ repeat_text }},
      "effect": "{{ effect }}",
      "lifetime": {{ lifetime }},
      "lifetimeMode": {{ lifetimeMode | int }}
      {%- if push_icon == "0" or push_icon == "3" %}
      , {% set duration = state_attr(media_player, 'media_duration') %}
        {% set position = state_attr(media_player, 'media_position') %}
        "progress": {% if duration and duration > 0 %}{{ (position / duration * 100) | round(0) }}{% else %}0{% endif %},
        "progressC": "{{ '%02x%02x%02x' | format(progress_bar_color[0], progress_bar_color[1], progress_bar_color[2]) }}"
      {%- endif %}
    }
    
  # Device topic helper
  awtrix_devices_topics: >-
    {%- set ns = namespace(topics = []) -%}
    {%- for device_id in device_ids -%}
      {%- set entity = expand(device_entities(device_id)) | select('search', 'device_topic') | map(attribute='entity_id') | first -%}
      {%- set topic = states(entity) -%}
      {% set ns.topics = ns.topics + [topic] -%}
    {%- endfor -%}
    {{ ns.topics }}

# This trigger runs on any state change to update the progress bar in real-time.
trigger:
  - platform: state
    entity_id: !input media_player

action:
  - choose:
      # CASE 1: Music is playing
      - conditions:
          - condition: state
            entity_id: !input media_player
            state: "playing"
        sequence:
          - repeat:
              for_each: "{{ awtrix_devices_topics }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item ~ '/' ~ display_type ~ ('/mediaplayer' if display_type == 'custom' else '') }}"
                    payload: "{{ payload_content }}"

      # CASE 2: Music is NOT playing (paused, stopped, idle, etc.)
      - conditions:
          - condition: template
            value_template: "{{ states(media_player) != 'playing' }}"
          # Only try to remove a custom app, notifications don't need to be cleared.
          - condition: template
            value_template: "{{ display_type == 'custom' }}"
        sequence:
          - repeat:
              for_each: "{{ awtrix_devices_topics }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item }}/custom/mediaplayer"
                    payload: "{}" # Empty payload removes the app

mode: queued
